version: 2.1


jobs:

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip jq
      
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/vpc.yaml \
              --tags project=capstone \
              --stack-name capstone-eks
        
      - run: 
          name: save subnets and security groups
          command: | 
              subnets=$(aws cloudformation list-exports --query "Exports[?Name==\`SubnetIds\`].Value" --no-paginate --output text)
              secgroups=$(aws cloudformation list-exports --query "Exports[?Name==\`SecurityGroups\`].Value" --no-paginate --output text)
              echo $subnets
              echo $secgroups
      # - run:
      #     name: Ensure backend infrastructure exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/backend.yml \
      #         --tags project=udapeople \
      #         --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          # exit 1
      # - run:
      #     name: Ensure frontend infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udapeople \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
               
          # exit 1
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             # Your code here
#             aws ec2 describe-instances \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --query "Reservations[*].Instances[*].PublicIpAddress" \
#               --output text >> .circleci/ansible/inventory.txt
#             cat .circleci/ansible/inventory.txt
#             # exit 1
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
# #       # Here's where you will add some code to rollback on failure
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#       - slack-fail-notification
         
workflows:
  default:
    jobs:
      - deploy-infrastructure